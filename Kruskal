#include <stdio.h>
#include <stdlib.h>

#define MAXEDGE 20
#define MAXVEX 20
#define INIFINTY 65535

typedef struct {
    
    int arc[MAXVEX][MAXVEX];
    int numVertexes, numEdges;
    
}MGraph;

typedef struct {  // 边集数组
    int begin;
    int end;
    int weight;
}Edge;

/**
 * 构建图
 */
void CreateMGraph(MGraph * G){
    
    int i, j;
    
    G->numVertexes = 7;  // 7个顶点
    G->numEdges = 12;  // 12条边
    
    for (i = 0; i < G->numVertexes; i++) {  // 初始化图
        for (j = 0; j < G->numVertexes; j++) {
            if (i == j)
                G->arc[i][j] = 0;
            else
                G->arc[i][j] = G->arc[j][i] = INIFINTY;
        }
    }
    
    G->arc[0][1] = 2;
    G->arc[0][2] = 4;
    G->arc[0][3] = 1;
    
	G->arc[1][3] = 3;
    G->arc[1][4] = 10;
    
    G->arc[2][3] = 2;
    G->arc[2][5] = 6;
    
    G->arc[3][4] = 7;
    G->arc[3][5] = 8;
    G->arc[3][6] = 4;
    
    G->arc[4][6] = 6;
    
    G->arc[5][6] = 1;
    
    // 利用邻接矩阵的对称性
    for (i = 0; i < G->numVertexes; i++)
        for (j = 0; j < G->numVertexes; j++)
            G->arc[j][i] = G->arc[i][j];
}


/**
 * 交换权值、头、尾
 */
void Swapn(Edge * edges, int i, int j){
    
    int temp;
    temp = edges[i].begin;
    edges[i].begin = edges[j].begin;
    edges[j].begin = temp;
    
    temp = edges[i].end;
    edges[i].end = edges[j].end;
    edges[j].end = temp;
    
    temp = edges[i].weight;
    edges[i].weight = edges[j].weight;
    edges[j].weight = temp;
}

/**
 * 对权值进行排序
 */
void sort(Edge edges[], MGraph *G){

    int i,j;
    
    for (i = 0;  i < G->numEdges; i++) {
        for (j = i+1; j < G->numEdges; j++) {
            if (edges[i].weight > edges[j].weight)
                Swapn(edges, i, j);
        }
    }
    
    printf("权值排序之后为：\n");
    
    for (i = 0;  i < G->numEdges; i++) {
        printf("(%d, %d) %d\n", edges[i].begin, edges[i].end, edges[i].weight);
    }
}

/**
 * 查找连线顶点的尾部下标
 */
int Find(int * parent, int f){
    
    while (parent[f] > 0)
        f = parent[f];
    return f;
}


void MiniSpanTree_Kruskal(MGraph G){
    
    int i,j,n,m;
    
    int k = 0;
    
    Edge edges[MAXEDGE]; // 定义边集数组
    int parent[MAXVEX]; // 定义一维数组来判断边与边是否形成回路
    
    //构建边集数组并排序
    for (i = 0; i < G.numVertexes - 1; i++) {
        for (j = i+1; j < G.numVertexes; j++) {
            if (G.arc[i][j] < INIFINTY) {
                edges[k].begin = i;
                edges[k].end = j;
                edges[k].weight = G.arc[i][j];
                k++;
            }
        }
    }
    sort(edges, &G);
    
    
    for (i = 0; i < G.numVertexes; i++) {
        parent[i] = 0;
    }
    
    printf("打印最小生成树:\n");
    for (i = 0;  i < G.numEdges; i++) {
        n = Find(parent, edges[i].begin);
        m = Find(parent, edges[i].end);
        
        if (n != m) {
            parent[n] = m;
            printf("(%d, %d) %d\n",edges[i].begin, edges[i].end
                   , edges[i].weight);
        }
    }
}

int main(int argc, const char * argv[]) {
    
    MGraph G;
    CreateMGraph(&G);
    MiniSpanTree_Kruskal(G);
    
    return 0;
}
